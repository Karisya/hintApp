export const Vdom = () => {
    return (
        <div className="Vdom">
            <div className="Vdom__holder">
                <h2 className="Vdom__title">Виртуальный DOM</h2>
                <div><p className="Vdom__text">Виртуальный DOM (VDOM) — это концепция программирования, в которой «виртуальное» представление пользовательского интерфейса хранится в памяти и синхронизируется с «настоящим» DOM при помощи библиотеки, такой как ReactDOM. Этот процесс называется согласованием.
<br/>
                    DOM расшифровывается как Document Object Model (объектная модель документа). При каждом изменении UI (user interface), DOM также обновляется для отображения этих изменений. Частые манипуляции с DOM негативно влияют на производительность.<br/>

                    DOM представляет собой древовидную структуру данных. Поэтому изменения и обновления самого DOM являются достаточно быстрыми. Но после изменения обновленный элемент и все его потомки (дочерние элементы) должны быть повторно отрисованы (отрендерены) для обновления UI приложения. Повторный рендеринг — очень медленный процесс. Таким образом, чем больше у нас компонентов UI, тем более дорогими с точки зрения производительности являются обновления DOM.

                    Манипуляции с RDOM являются медленными. Манипуляции с VDOM намного быстрее, поскольку они не отображаются (отрисовываются) на экране.

                    Когда в UI добавляются новые элементы, создается VDOM в виде дерева. Каждый элемент является узлом этого дерева. При изменении состояния любого элемента, создается новое дерево. Затем это новое дерево сравнивается (diffed) со старым.<br/>

                    После этого вычисляется наиболее эффективный метод внесения изменений в RDOM. Цель данных вычислений состоит в минимизации количества операций, совершаемых с RDOM. Тем самым, уменьшаются накладные расходы, связанные с обновлением RDOM.<br/>

                    После этого вычисляется разница между предыдущей и текущей версиями виртуального DOM-дерева. Затем все родительское поддерево подвергается повторному рендерингу для представления обновленного UI. Наконец, это обновленное дерево используется для обновления RDOM.<br />

                    В React каждая часть UI является компонентом и почти каждый компонент имеет состояние (state). При изменении состояния компонента, React обновляет VDOM. После обновления VDOM, React сравнивает его текущую версию с предыдущей. Этот процесс называется «поиском различий» (diffing).<br />

                    После обнаружения объектов, изменившихся в VDOM, React обновляет соответствующие объекты в RDOM. Это существенно повышает производительность по сравнению с прямыми манипуляциями DOM. Именно это делает React высокопроизводительной библиотекой JavaScript.
                    <br />
                    React использует эвристический O(n) (линейный) алгоритм, основываясь на двух предположениях:

                    <ul>
                        <li>Два элемента разных типов приводят к построению разных деревьев</li>
                        <li>Разработчик может обеспечить стабильность элементов между рендерингами посредством пропа key (ключ)</li>
</ul>
                </p>
                </div>

            </div>

        </div>
    )
}